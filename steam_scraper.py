import urllib
from bs4 import BeautifulSoup

#info for using steam api (unnecessary for the current functions)
api_key = ''
steam_id = ''

#dictionary mapping tag to its tag id used by steam for search - generated by a separate script
tag_to_id = {
    "Overall":"",
    "Hunting":"9564",
    "On-Rails Shooter":"56690",
    "Trains":"1616",
    "Political":"4853",
    "World War I":"5382",
    "Demons":"9541",
    "Crime":"6378",
    "Rogue-like":"1716",
    "Pinball":"6621",
    "NSFW":"24904",
    "Turn-Based":"1677",
    "Animation & Modeling":"872",
    "Comedy":"1719",
    "Dynamic Narration":"9592",
    "Inventory Management":"6276",
    "Gaming":"150626",
    "Otome":"31579",
    "Linear":"7250",
    "Football":"7226",
    "Benchmark":"5407",
    "Text-Based":"31275",
    "Soundtrack":"7948",
    "Online Co-Op":"3843",
    "Third Person":"1697",
    "First-Person":"3839",
    "Ninja":"1688",
    "Software":"8013",
    "Physics":"3968",
    "Thriller":"4064",
    "Mod":"5348",
    "Building":"1643",
    "Lemmings":"17337",
    "Magic":"4057",
    "Wargame":"4684",
    "Great Soundtrack":"1756",
    "Psychological":"5186",
    "Steampunk":"1777",
    "Software Training":"1445",
    "Fighting":"1743",
    "Simulation":"599",
    "2D":"3871",
    "Realistic":"4175",
    "Rome":"6948",
    "Lara Croft":"21722",
    "Grid-Based Movement":"7569",
    "Bowling":"7328",
    "Military":"4168",
    "Assassin":"4376",
    "Replay Value":"4711",
    "Experimental":"13782",
    "Parody":"4878",
    "God Game":"5300",
    "Design & Illustration":"84",
    "Twin Stick Shooter":"4758",
    "Pirates":"1681",
    "Singleplayer":"4182",
    "Indie":"492",
    "3D Vision":"29363",
    "Shoot 'Em Up":"4255",
    "Real-Time with Pause":"7107",
    "Stealth":"1687",
    "Dragons":"4046",
    "Web Publishing":"1038",
    "Trading":"4202",
    "Cyberpunk":"4115",
    "Gun Customization":"5765",
    "Bullet Time":"5796",
    "Supernatural":"10808",
    "Top-Down Shooter":"4637",
    "Education":"1036",
    "Swordplay":"4608",
    "Aliens":"1673",
    "Open World":"1695",
    "Underwater":"9157",
    "Dark Comedy":"19995",
    "Nonlinear":"6869",
    "Arcade":"1773",
    "Hack and Slash":"1646",
    "Satire":"1651",
    "Resource Management":"8945",
    "Sports":"701",
    "Romance":"4947",
    "Spectacle fighter":"4777",
    "Retro":"4004",
    "Bullet Hell":"4885",
    "Real-Time":"4161",
    "Underground":"21006",
    "Family Friendly":"5350",
    "Difficult":"4026",
    "Action RPG":"4231",
    "Competitive":"3878",
    "Parkour":"4036",
    "Relaxing":"1654",
    "Kickstarter":"5153",
    "Horror":"1667",
    "Utilities":"87",
    "Cinematic":"4145",
    "Stylized":"4252",
    "Controller":"7481",
    "RTS":"1676",
    "Lovecraftian":"7432",
    "Point & Click":"1698",
    "Mythology":"16094",
    "America":"13190",
    "Cartoon":"4562",
    "Psychedelic":"1714",
    "Third-Person Shooter":"3814",
    "Action":"19",
    "Minimalist":"4094",
    "Short":"4234",
    "City Builder":"4328",
    "Dystopian":"5030",
    "Action-Adventure":"4106",
    "Tower Defense":"1645",
    "RPGMaker":"5577",
    "Programming":"5432",
    "Visual Novel":"3799",
    "Beat 'em up":"4158",
    "4 Player Local":"4840",
    "Co-op":"1685",
    "Anime":"4085",
    "Historical":"3987",
    "Real Time Tactics":"3813",
    "Loot":"4236",
    "Interactive Fiction":"11014",
    "Free to Play":"113",
    "Side Scroller":"3798",
    "Procedural Generation":"5125",
    "Perma Death":"1759",
    "2D Fighter":"4736",
    "Team-Based":"5711",
    "Intentionally Awkward Controls":"14906",
    "Abstract":"4400",
    "Detective":"5613",
    "Class-Based":"4155",
    "Hex Grid":"1717",
    "Conspiracy":"5372",
    "Gothic":"3952",
    "Top-Down":"4791",
    "Narration":"5094",
    "Time Attack":"5390",
    "Drama":"5984",
    "Tutorial":"12057",
    "Puzzle-Platformer":"5537",
    "Isometric":"5851",
    "Politics":"4754",
    "Batman":"1694",
    "Mature":"5611",
    "Audio Production":"1027",
    "Sandbox":"3810",
    "Puzzle":"1664",
    "Robots":"5752",
    "Clicker":"379975",
    "Management":"12472",
    "Music":"1621",
    "Story Rich":"1742",
    "Mystery Dungeon":"198631",
    "Cold War":"5179",
    "Economy":"4695",
    "Space Sim":"16598",
    "Racing":"699",
    "War":"1678",
    "JRPG":"4434",
    "Split Screen":"10816",
    "e-sports":"5055",
    "GameMaker":"1649",
    "Medieval":"4172",
    "Platformer":"1625",
    "Fast-Paced":"1734",
    "Documentary":"15339",
    "MOBA":"1718",
    "Score Attack":"5154",
    "Offroad":"7622",
    "Typing":"1674",
    "Card Game":"1666",
    "Mini Golf":"22955",
    "Space":"1755",
    "Illuminati":"7478",
    "Tanks":"13276",
    "Character Action Game":"3955",
    "Dungeon Crawler":"1720",
    "Spelling":"71389",
    "Female Protagonist":"7208",
    "Destruction":"5363",
    "Villain Protagonist":"11333",
    "Western":"1647",
    "PvP":"1775",
    "Crafting":"1702",
    "Multiplayer":"3859",
    "Atmospheric":"4166",
    "Tactical RPG":"21725",
    "Sailing":"13577",
    "Silent Protagonist":"15954",
    "FMV":"18594",
    "Science":"5794",
    "Massively Multiplayer":"128",
    "Board Game":"1770",
    "Asynchronous Multiplayer":"17770",
    "Werewolves":"17015",
    "Mechs":"4821",
    "PvE":"6730",
    "Zombies":"1659",
    "2.5D":"4975",
    "Sokoban":"1730",
    "Hidden Object":"1738",
    "Hacking":"5502",
    "Based On A Novel":"3796",
    "Crowdfunded":"7113",
    "Quick-Time Events":"4559",
    "Philisophical":"134316",
    "Star Wars":"1735",
    "Cute":"4726",
    "Steam Machine":"348922",
    "Gambling":"16250",
    "Game Development":"13906",
    "Classic":"1693",
    "Noir":"6052",
    "Diplomacy":"6310",
    "Wrestling":"47827",
    "Survival Horror":"3978",
    "Adventure":"21",
    "Sexual Content":"12095",
    "Moddable":"1669",
    "Runner":"8666",
    "Hand-drawn":"6815",
    "Cartoony":"4195",
    "Pool":"17927",
    "Nudity":"6650",
    "MMORPG":"1754",
    "Co-op Campaign":"4508",
    "Time Manipulation":"6625",
    "Martial Arts":"6915",
    "Photo Editing":"809",
    "Trading Card Game":"9271",
    "Voxel":"1732",
    "CRPG":"4474",
    "Funny":"4136",
    "Basketball":"1746",
    "Superhero":"1671",
    "Grand Strategy":"4364",
    "Mystery":"5716",
    "Movie":"4700",
    "Character Customization":"4747",
    "Mars":"6702",
    "Vampire":"4018",
    "Strategy":"9",
    "1980s":"7743",
    "Surreal":"1710",
    "Turn-Based Tactics":"14139",
    "LEGO":"1736",
    "Chess":"4184",
    "Rhythm":"1752",
    "Dark Humor":"5923",
    "Dating Sim":"9551",
    "Soccer":"1679",
    "Memes":"10397",
    "Warhammer 40K":"12286",
    "Fantasy":"1684",
    "Horses":"6041",
    "Agriculture":"22602",
    "Mining":"5981",
    "Post-apocalyptic":"3835",
    "Flight":"15045",
    "Episodic":"4242",
    "Colorful":"4305",
    "Alternate History":"4598",
    "Party-Based RPG":"10695",
    "Blood":"5228",
    "Survival":"1662",
    "1990's":"6691",
    "Transhumanism":"4137",
    "Dark":"4342",
    "Dinosaurs":"5160",
    "Music-Based Procedural Generation":"8253",
    "Turn-Based Combat":"4325",
    "Gore":"4345",
    "RPG":"122",
    "Golf":"7038",
    "3D Platformer":"5395",
    "Sniper":"7423",
    "Multiple Endings":"6971",
    "Heist":"1680",
    "Time Travel":"10679",
    "Cult Classic":"7782",
    "Faith":"180368",
    "Choose Your Own Adventure":"4486",
    "Naval":"6910",
    "4X":"1670",
    "Psychological Horror":"1721",
    "Video Production":"784",
    "Shooter":"1774",
    "Games Workshop":"5310",
    "Metroidvania":"1628",
    "Dark Fantasy":"4604",
    "Foreign":"51306",
    "Feature Film":"233824",
    "VR":"21978",
    "Lore-Rich":"3854",
    "FPS":"1663",
    "6DOF":"4835",
    "Arena Shooter":"5547",
    "Level Editor":"8122",
    "Capitalism":"4845",
    "Local Co-Op":"3841",
    "Futuristic":"4295",
    "Sci-fi":"3942",
    "Word Game":"24003",
    "Tactical":"1708",
    "Driving":"1644",
    "World War II":"4150",
    "Touch-Friendly":"25085",
    "Match 3":"1665",
    "Mouse only":"11123",
    "Comic Book":"1751",
    "Modern":"5673",
    "Turn-Based Strategy":"1741",
    "Strategy RPG":"17305",
    "Hardware":"603297",
    "Choices Matter":"6426",
    "Violent":"4667",
    "Rogue-lite":"3959",
    "Base Building":"7332",
    "Fishing":"15564",
    "Walking Simulator":"5900",
    "Pixel Graphics":"3964",
    "Exploration":"3834",
    "Remake":"5708",
    "Local Multiplayer":"7368",
    "Casual":"597",
    "TrackIR":"8075"
}

#simple struct-like class to hold game data
class Game(object):
    __slots__ = ['title', 'discount_pct', 'final_price']
    def __init__(self, title=u'', discount_pct=0, final_price=0.00):
        self.title = title
        self.discount_pct = discount_pct
        self.final_price = final_price

    def __repr__(self):
        return self.title + ': $' + str(self.final_price) + ' (' + str(self.discount_pct) + '%)'

    def __str__(self):
        s = self.title + ", "
        if self.final_price == 0.00:
            s += "free"
        else:
            if self.discount_pct != 0: s += str(abs(self.discount_pct)) + "% off for "
            s += "${0:.2f}".format(self.final_price)
        return s

def get_games(genre, tab):
    """
    :param genre: Action, Adventure, Strategy, Casual, etc. (based on Steam's Popular Tags http://store.steampowered.com/tag/browse/#global_492
    :param tab: NewReleases, TopSellers, Specials (Discounts)
    :return: a list of game objects holding game title, price and discount percentage
    """

    search_filter = {"NewReleases":"filter=popularnew",
                     "TopSellers":"filter=topsellers",
                     "Specials":"specials=1"}

    sort_param = ''
    if tab == "NewReleases":
        sort_param = "sort_by=Released_DESC&"

    tag_param = ''
    if genre != "Overall":
        tag_param = "tags=" + tag_to_id[genre] + "&"
    url = "http://store.steampowered.com/search/?{}{}{}".format(sort_param, tag_param, search_filter[tab])
    #print url

    #overall urls:
    #http://store.steampowered.com/search/?sort_by=Released_DESC&filter=popularnew
    #http://store.steampowered.com/search/?filter=topsellers
    #http://store.steampowered.com/search/?specials=1

    #genre example urls:
    #http://store.steampowered.com/search/?sort_by=Released_DESC&tags=113&filter=popularnew
    #http://store.steampowered.com/search/?tags=492&filter=topsellers
    #http://store.steampowered.com/search/?tags=19&specials=1

    # check if url opens
    try:
        page = urllib.urlopen(url)
    except:
        raise IOError("invalid url")

    # scrape data
    soup = BeautifulSoup(page, "html.parser")
    #print soup.prettify()

    games_set = soup.find_all("div", class_="responsive_search_name_combined")#finds all game data (html)

    #consider cases when games found is 0 or less than 10 etc. (end reached)

    #print type(games_set)

    games = []
    for tag in games_set:
        game_data = Game()
        #print len(tag)
        for child in tag.descendants:
            if type(child) == type(tag):
                # try:
                #     print child["class"]
                # except:
                #     pass

                try:
                    if child["class"] == [u'title']:
                        game_data.title = child.contents[0].encode('ascii', 'ignore')#ignore unicode in game title
                    elif child["class"] == [u'col', u'search_discount', u'responsive_secondrow']:
                        try:
                            game_data.discount_pct = (int)(child.contents[1].string.strip('%'))
                        except:
                            pass#free to play

                    #note: it seems child.contents[0] gets the full price for non-discounted items,
                    # child.contents[1] gets the full price for discounted items,
                    # and [2] gets the discounted price.
                    elif child["class"] == [u'col', u'search_price', u'discounted', u'responsive_secondrow']:
                        try:
                            game_data.final_price = (float)(child.contents[2].string.strip().lstrip('$'))
                        except:
                            pass#free to play

                    elif child["class"] == [u'col', u'search_price', u'responsive_secondrow']:
                        try:
                            game_data.final_price = (float)(child.contents[0].string.strip().lstrip('$'))
                        except:
                            pass#free to play
                except KeyError:#happens when tag does not have a class attribute (not interested in such tags)
                    pass
        games.append(game_data)
    print games
    return games

#test
p = get_games("Action", "NewReleases")





